"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TavilyMapAPIWrapper = exports.TavilyCrawlAPIWrapper = exports.TavilyExtractAPIWrapper = exports.TavilySearchAPIWrapper = void 0;
const env_1 = require("@langchain/core/utils/env");
const TAVILY_BASE_URL = "https://api.tavily.com";
/**
 * Base wrapper class with shared functionality for Tavily API wrappers.
 */
class BaseTavilyAPIWrapper {
    /**
     * Constructs a new instance of the BaseTavilyAPIWrapper.
     * @param fields The fields used to initialize the wrapper.
     */
    constructor(fields) {
        Object.defineProperty(this, "tavilyApiKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "apiBaseUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        const apiKey = fields.tavilyApiKey ?? (0, env_1.getEnvironmentVariable)("TAVILY_API_KEY");
        if (!apiKey) {
            throw new Error("Tavily API key not found. Please provide it as an argument or set the TAVILY_API_KEY environment variable.");
        }
        this.tavilyApiKey = apiKey;
        this.apiBaseUrl = fields.apiBaseUrl ?? TAVILY_BASE_URL;
    }
    /**
     * Converts camelCase keys to snake_case for API compatibility
     * @param params The parameters with camelCase keys
     * @returns The parameters with snake_case keys only
     */
    convertCamelToSnakeCase(params) {
        const result = {};
        for (const [key, value] of Object.entries(params)) {
            if (value === undefined) {
                continue;
            }
            // Convert camelCase key to snake_case
            // Handle potential leading capital letter first
            let newKey = key.replace(/^[A-Z]/, (letter) => letter.toLowerCase());
            // Then handle subsequent capital letters
            newKey = newKey.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`);
            result[newKey] = value;
        }
        return result;
    }
}
/**
 * A wrapper that encapsulates access to the Tavily Search API. Primarily used for testing.
 */
class TavilySearchAPIWrapper extends BaseTavilyAPIWrapper {
    async rawResults(params) {
        const headers = {
            Authorization: `Bearer ${this.tavilyApiKey}`,
            "Content-Type": "application/json",
        };
        // Convert camelCase to snake_case for API compatibility
        const apiParams = this.convertCamelToSnakeCase(params);
        const response = await fetch(`${this.apiBaseUrl}/search`, {
            method: "POST",
            headers,
            body: JSON.stringify(apiParams),
        });
        if (!response.ok) {
            console.log(response);
            const errorData = await response.json();
            const errorMessage = errorData.detail?.error || "Unknown error";
            throw new Error(`Error ${response.status}: ${errorMessage}`);
        }
        return response.json();
    }
}
exports.TavilySearchAPIWrapper = TavilySearchAPIWrapper;
/**
 * A wrapper that encapsulates access to the Tavily Extract API. Primarily used for testing.
 */
class TavilyExtractAPIWrapper extends BaseTavilyAPIWrapper {
    /**
     * Extracts content from one or more URLs using the Tavily Extract API.
     * @param params The parameters for the extraction. See {@link TavilyExtractParams}.
     * @returns The raw response body from the Tavily Extract API. See {@link TavilyExtractResponse}.
     */
    async rawResults(params) {
        const headers = {
            Authorization: `Bearer ${this.tavilyApiKey}`,
            "Content-Type": "application/json",
        };
        const apiParams = this.convertCamelToSnakeCase(params);
        const response = await fetch(`${this.apiBaseUrl}/extract`, {
            method: "POST",
            headers,
            body: JSON.stringify(apiParams),
        });
        if (!response.ok) {
            const errorData = await response.json();
            const errorMessage = errorData.detail?.error || "Unknown error";
            throw new Error(`Error ${response.status}: ${errorMessage}`);
        }
        return response.json();
    }
}
exports.TavilyExtractAPIWrapper = TavilyExtractAPIWrapper;
/**
 * A wrapper that encapsulates access to the Tavily Crawl API. Primarily used for testing.
 */
class TavilyCrawlAPIWrapper extends BaseTavilyAPIWrapper {
    /**
     * Crawls a list of URLs using the Tavily Crawl API.
     * @param params The parameters for the crawl. See {@link TavilyCrawlParams}.
     * @returns The raw response body from the Tavily Crawl API. See {@link TavilyCrawlResponse}.
     */
    async rawResults(params) {
        const headers = {
            Authorization: `Bearer ${this.tavilyApiKey}`,
            "Content-Type": "application/json",
        };
        const apiParams = this.convertCamelToSnakeCase(params);
        const response = await fetch(`${this.apiBaseUrl}/crawl`, {
            method: "POST",
            headers,
            body: JSON.stringify(apiParams),
        });
        if (!response.ok) {
            const errorData = await response.json();
            const errorMessage = errorData.detail?.error || "Unknown error";
            throw new Error(`Error ${response.status}: ${errorMessage}`);
        }
        return response.json();
    }
}
exports.TavilyCrawlAPIWrapper = TavilyCrawlAPIWrapper;
/**
 * A wrapper that encapsulates access to the Tavily Map API. Primarily used for testing.
 */
class TavilyMapAPIWrapper extends BaseTavilyAPIWrapper {
    /**
     * Maps a URL using the Tavily Map API.
     * @param params The parameters for the map. See {@link TavilyMapParams}.
     * @returns The raw response body from the Tavily Map API. See {@link TavilyMapResponse}.
     */
    async rawResults(params) {
        const headers = {
            Authorization: `Bearer ${this.tavilyApiKey}`,
            "Content-Type": "application/json",
        };
        const apiParams = this.convertCamelToSnakeCase(params);
        const response = await fetch(`${this.apiBaseUrl}/map`, {
            method: "POST",
            headers,
            body: JSON.stringify(apiParams),
        });
        if (!response.ok) {
            const errorData = await response.json();
            const errorMessage = errorData.detail?.error || "Unknown error";
            throw new Error(`Error ${response.status}: ${errorMessage}`);
        }
        return response.json();
    }
}
exports.TavilyMapAPIWrapper = TavilyMapAPIWrapper;
