import { CallbackManagerForToolRun } from "@langchain/core/callbacks/manager";
import { StructuredTool, ToolParams } from "@langchain/core/tools";
import { z } from "zod";
import { InferInteropZodOutput } from "@langchain/core/dist/utils/types/zod.js";
import { TavilyExtractAPIWrapper, type TavilyExtractResponse } from "./utils.js";
export type ExtractDepth = "basic" | "advanced";
export interface TavilyExtractInput {
    urls: string[];
    extractDepth?: ExtractDepth;
    includeImages?: boolean;
    format?: "markdown" | "text";
    includeFavicon?: boolean;
}
export type TavilyExtractAPIRetrieverFields = ToolParams & {
    /**
     * The base URL to be used for the Tavily Extract API.
     *
     *
     */
    apiBaseUrl?: string;
    /**
     * The API key used for authentication with the Tavily Search API.
     *
     */
    tavilyApiKey?: string;
    /**
     * The depth of the extract. It can be "basic" or "advanced".
     *
     */
    extractDepth?: ExtractDepth;
    /**
     * Include a list of query-related images in the response.
     *
     * @default false
     */
    includeImages?: boolean;
    /**
     * The format of the respose. It can be "markdown" or "text"
     *
     * @default "markdown"
     */
    format?: "markdown" | "text";
    /**
     * Whether to include the favicon URL for each result.
     *
     * @default false
     */
    includeFavicon?: boolean;
    /**
     * The name of the tool.
     *
     * @default "tavily_extract"
     */
    name?: string;
    /**
     * The description of the tool.
     *
     * @default "Extracts comprehensive content from web pages based on provided URLs. Useful for when you need to answer questions about current events. Input should be a list of one or more URLs."
     */
    description?: string;
    /**
     * Whether to return the tool's output directly.
     *
     * Setting this to true means that after the tool is called,
     * an agent should stop looping.
     *
     * @default false
     */
    returnDirect?: boolean;
    /**
     * An API wrapper that can be used to interact with the Tavily Extract API. Useful for testing.
     *
     * If specified, the tool will use this API wrapper instead of creating a new one, and fields used
     * in API Wrapper initialization, like {@link TavilyExtractAPIRetrieverFields.tavilyApiKey}, will be
     * ignored.
     */
    apiWrapper?: TavilyExtractAPIWrapper;
};
declare const inputSchema: z.ZodObject<{
    urls: z.ZodArray<z.ZodString, "many">;
    extractDepth: z.ZodOptional<z.ZodEnum<["basic", "advanced"]>>;
    includeImages: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    urls: string[];
    extractDepth?: "basic" | "advanced" | undefined;
    includeImages?: boolean | undefined;
}, {
    urls: string[];
    extractDepth?: "basic" | "advanced" | undefined;
    includeImages?: boolean | undefined;
}>;
export declare class TavilyExtract extends StructuredTool<typeof inputSchema> {
    static lc_name(): string;
    name: string;
    description: string;
    schema: z.ZodObject<{
        urls: z.ZodArray<z.ZodString, "many">;
        extractDepth: z.ZodOptional<z.ZodEnum<["basic", "advanced"]>>;
        includeImages: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        urls: string[];
        extractDepth?: "basic" | "advanced" | undefined;
        includeImages?: boolean | undefined;
    }, {
        urls: string[];
        extractDepth?: "basic" | "advanced" | undefined;
        includeImages?: boolean | undefined;
    }>;
    apiBaseUrl?: string;
    extractDepth?: ExtractDepth;
    includeImages?: boolean;
    format?: "markdown" | "text";
    includeFavicon?: boolean;
    private apiWrapper;
    constructor(params?: TavilyExtractAPIRetrieverFields);
    _call(input: InferInteropZodOutput<typeof inputSchema>, _runManager?: CallbackManagerForToolRun): Promise<TavilyExtractResponse | {
        error: string;
    }>;
}
export {};
